Stage 1

Steps to implement Hands-on Project - Mission 1

- Access AWS console and go to IAM service
- Under Access management, Click in "Users", then "Add users". Insert the User name **terraform-en-1** and click in **Next** to create a programmatic user.
- This user should have S3 full Access
- Rename the .csv credentials to accessKeys.csv
****manually upload downloaded file into GCP shell****
- Access GCP Console and open Cloud Shell
- Upload **accessKeys.csv** and **mission1.zip** hands-on file to GCP Cloud Shell
- Check if upload has been successfully completed using the command **ls -la**
- Hands-on files preparation

***Run this command***
mkdir mission1_en
mv mission1.zip mission1_en
cd mission1_en
unzip mission1.zip
mv ~/accessKeys.csv mission1/en
cd mission1/en
chmod +x *.sh

*****Run the following commands to prepare AWS and GCP environment. Authorize when asked.****

./aws_set_credentials.sh accessKeys.csv
gcloud config set project <project_id>

***Execute the command below***
./gcp_set_project.sh

***Enable the Container Registry API, Kubernetes Engine API and the Cloud SQL API***

gcloud services enable containerregistry.googleapis.com 
gcloud services enable container.googleapis.com 
gcloud services enable sqladmin.googleapis.com 

_IMPORTANT (DO NOT SKIP):

- **Before executing the Terraform commands, open the Google Editor and update the file tcb_aws_storage.tf replacing the bucket name with an unique name (AWS requires unique bucket names).**
    - Open the **tcb_aws_storage.tf** using Google Editor
    - On **line 4** of the file **tcb_aws_storage.tf**:
        - Replace **xxxx** with your name initials, using **5 letters** plus **5 random numbers**:
        Example: **luxxy-covid-testing-system-pdf-en-jerod29292**

***Run the following commands to finish provision infrastructure steps***

cd ~/mission1_en/mission1/en/terraform/

terraform init
terraform plan
terraform apply
	Type Yes and go ahead.
***after the command is done executing, compare the GKE autopilot with standard***
use ds link: https://cloud.google.com/kubernetes-engine/docs/resources/autopilot-standard-feature-comparison

***SQL Network Configuration***

- Once the Cloud SQL instance is provisioned, access the Cloud SQL service
- Click on your Cloud SQL instance.
- On the left side, under Primary Instance, click on **Connections**.
- Go to **Networking** tab.
- Under **Instance IP assignment**, select Private IP to enable.
    - Under **Associated networking**, select "Default"
    - Click **Set up Connection**
    - Click on **Enable API**, to enable Service Networking API (if asked).
    - Select **Use an automatically allocated IP range in your network**.
    - Click **Continue**
    - Click **Create Connection** and **wait a minutes until conclude.** You will see the message: “*Private services access connection for network default
     has been successfully created.”*
- Under **Authorized Networks**, click "Add Network".
- Under **New Network**, enter the following information:
    - **Name:** Public Access (For testing purposes only)
    - **Network**: 0.0.0.0/0
    - Click **Done**.
    - Click **Save** and ****wait to finish the update.
    This update may take from **10 to 20 minutes** to finish

PS: For production environments, it is recommended to use only the Private Network for database access. 
⚠️  Never grant public network access (0.0.0.0/0) to production databases.
